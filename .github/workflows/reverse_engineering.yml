name: Reverse-Engineer Case Studies

on:
  workflow_dispatch:
    inputs:
      overrideBenchmark:
        description: "Override parameter 'benchmark' to true (use hyperfine)"
        required: false
        default: "false"
        type: "string"
      analyzeVulnerabilities:
        description: "Analyze vulnerabilities (use snyk)"
        required: false
        default: "false"
        type: "string"

  # Every day at 2:00.
  schedule:
    - cron: "0 2 * * *"

permissions:
  contents: write

jobs:
  collect_info:
    runs-on: ubuntu-latest

    outputs:
      array: ${{ steps.find_directories.outputs.array }}
      latest_version: ${{ steps.latest_version.outputs.value }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Find directories
        id: find_directories
        run: |
          array=$( \
            printf '[%s]' "$(find . -maxdepth 1 -type d -exec test -e "{}/.retriever.yml" ';' -printf '"%P",' | sed 's/\.\///g; s/,$//')" \
          )
          echo "array=$array" >> $GITHUB_OUTPUT

      - name: Get latest Retriever version
        id: latest_version
        run: |
          LATEST_VERSION=$(\
            curl -sL ${{ github.api_url }}/repos/PalladioSimulator/Palladio-ReverseEngineering-Retriever/releases/latest \
            | jq  -r ".tag_name"
          )
          echo "value=$LATEST_VERSION" >> $GITHUB_OUTPUT

  generate_pcm:
    runs-on: ubuntu-latest
    needs: collect_info
    continue-on-error: true
    if: ${{ inputs.analyzeVulnerabilities != 'true' }}
    strategy:
      fail-fast: false
      matrix:
        directory: ${{ fromJson(needs.collect_info.outputs.array) }}

    steps:
      - name: Execute Retriever
        uses: ./.github/workflows/execute_retriever.yml
        with:
          overrideBenchmark: ${{ inputs.overrideBenchmark }}
          analyzeVulnerabilities: ${{ inputs.analyzeVulnerabilities }}

  generate_pcm_sequentially:
    runs-on: ubuntu-latest
    needs: collect_info
    continue-on-error: true
    if: ${{ inputs.analyzeVulnerabilities == 'true' }}
    strategy:
      fail-fast: false
      max-parallel: 1
      matrix:
        directory: ${{ fromJson(needs.collect_info.outputs.array) }}

    steps:
      - name: Execute Retriever
        uses: ./.github/workflows/execute_retriever.yml
        with:
          overrideBenchmark: ${{ inputs.overrideBenchmark }}
          analyzeVulnerabilities: ${{ inputs.analyzeVulnerabilities }}

  commit_results:
    runs-on: ubuntu-latest
    needs:
      - collect_info
      - generate_pcm

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          path: repo

      - name: Download artifact
        id: download_artifact
        uses: actions/download-artifact@v3
        continue-on-error: true
        with:
          name: to_commit
          path: to_commit

      - name: Integrate changes
        if: steps.download_artifact.outcome == 'success'
        run: |
          rsync -a to_commit/* repo
          cd repo
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          git add .
          git commit -m "Upload analysis (Retriever ${{ needs.collect_info.outputs.latest_version }})"
          git push
